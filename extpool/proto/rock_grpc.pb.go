// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v4.25.3
// source: proto/rock.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// MempoolClient is the client API for Mempool service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MempoolClient interface {
	AddTxs(ctx context.Context, in *AddTxsRequest, opts ...grpc.CallOption) (*AddTxsResponse, error)
	SendBatch(ctx context.Context, in *SendBatchRequest, opts ...grpc.CallOption) (*AddTxsResponse, error)
	AckBatch(ctx context.Context, in *AckBatchRequest, opts ...grpc.CallOption) (*AddTxsResponse, error)
	FetchBatch(ctx context.Context, in *FetchBatchRequest, opts ...grpc.CallOption) (*FetchBatchResponse, error)
}

type mempoolClient struct {
	cc grpc.ClientConnInterface
}

func NewMempoolClient(cc grpc.ClientConnInterface) MempoolClient {
	return &mempoolClient{cc}
}

func (c *mempoolClient) AddTxs(ctx context.Context, in *AddTxsRequest, opts ...grpc.CallOption) (*AddTxsResponse, error) {
	out := new(AddTxsResponse)
	err := c.cc.Invoke(ctx, "/rock.Mempool/AddTxs", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mempoolClient) SendBatch(ctx context.Context, in *SendBatchRequest, opts ...grpc.CallOption) (*AddTxsResponse, error) {
	out := new(AddTxsResponse)
	err := c.cc.Invoke(ctx, "/rock.Mempool/SendBatch", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mempoolClient) AckBatch(ctx context.Context, in *AckBatchRequest, opts ...grpc.CallOption) (*AddTxsResponse, error) {
	out := new(AddTxsResponse)
	err := c.cc.Invoke(ctx, "/rock.Mempool/AckBatch", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mempoolClient) FetchBatch(ctx context.Context, in *FetchBatchRequest, opts ...grpc.CallOption) (*FetchBatchResponse, error) {
	out := new(FetchBatchResponse)
	err := c.cc.Invoke(ctx, "/rock.Mempool/FetchBatch", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MempoolServer is the server API for Mempool service.
// All implementations must embed UnimplementedMempoolServer
// for forward compatibility
type MempoolServer interface {
	AddTxs(context.Context, *AddTxsRequest) (*AddTxsResponse, error)
	SendBatch(context.Context, *SendBatchRequest) (*AddTxsResponse, error)
	AckBatch(context.Context, *AckBatchRequest) (*AddTxsResponse, error)
	FetchBatch(context.Context, *FetchBatchRequest) (*FetchBatchResponse, error)
	mustEmbedUnimplementedMempoolServer()
}

// UnimplementedMempoolServer must be embedded to have forward compatible implementations.
type UnimplementedMempoolServer struct {
}

func (UnimplementedMempoolServer) AddTxs(context.Context, *AddTxsRequest) (*AddTxsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddTxs not implemented")
}
func (UnimplementedMempoolServer) SendBatch(context.Context, *SendBatchRequest) (*AddTxsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendBatch not implemented")
}
func (UnimplementedMempoolServer) AckBatch(context.Context, *AckBatchRequest) (*AddTxsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AckBatch not implemented")
}
func (UnimplementedMempoolServer) FetchBatch(context.Context, *FetchBatchRequest) (*FetchBatchResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FetchBatch not implemented")
}
func (UnimplementedMempoolServer) mustEmbedUnimplementedMempoolServer() {}

// UnsafeMempoolServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MempoolServer will
// result in compilation errors.
type UnsafeMempoolServer interface {
	mustEmbedUnimplementedMempoolServer()
}

func RegisterMempoolServer(s grpc.ServiceRegistrar, srv MempoolServer) {
	s.RegisterService(&Mempool_ServiceDesc, srv)
}

func _Mempool_AddTxs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddTxsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MempoolServer).AddTxs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rock.Mempool/AddTxs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MempoolServer).AddTxs(ctx, req.(*AddTxsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Mempool_SendBatch_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendBatchRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MempoolServer).SendBatch(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rock.Mempool/SendBatch",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MempoolServer).SendBatch(ctx, req.(*SendBatchRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Mempool_AckBatch_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AckBatchRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MempoolServer).AckBatch(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rock.Mempool/AckBatch",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MempoolServer).AckBatch(ctx, req.(*AckBatchRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Mempool_FetchBatch_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FetchBatchRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MempoolServer).FetchBatch(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rock.Mempool/FetchBatch",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MempoolServer).FetchBatch(ctx, req.(*FetchBatchRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Mempool_ServiceDesc is the grpc.ServiceDesc for Mempool service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Mempool_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "rock.Mempool",
	HandlerType: (*MempoolServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddTxs",
			Handler:    _Mempool_AddTxs_Handler,
		},
		{
			MethodName: "SendBatch",
			Handler:    _Mempool_SendBatch_Handler,
		},
		{
			MethodName: "AckBatch",
			Handler:    _Mempool_AckBatch_Handler,
		},
		{
			MethodName: "FetchBatch",
			Handler:    _Mempool_FetchBatch_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/rock.proto",
}
